import utils.fileUtils as fileUtils
from PIL import Image, ImageTk

import utils.imageUtils as imageUtils

MAP_BLOC_DIMENSIONS = (20, 20)

MAP_EXTENSION_NAME = "dat"
MAP_FOLDER_PATH = "../config/maps/"

IMG_MAP_ROCK = None
IMG_MAP_ROCK_TK = None

IMG_MAP_MINE = None
IMG_MAP_MINE_TK = None

IMG_MAP_AIR = None
IMG_MAP_AIR_TK = None

IMG_MAP_INTERROGATIVE_POINT_BASIC = None
IMG_MAP_INTERROGATIVE_POINT_TK_BASIC = None

IMG_MAP_BIG_INTERROGATIVE_POINT_BASIC = None
IMG_MAP_BIG_INTERROGATIVE_POINT_TK_BASIC = None

IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT = 20
IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT = [None] * IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT
IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_TK = [None] * IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT

IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT = [None] * IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT
IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT_TK = [None] * IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT

def loadImages():
    """
    Charge toutes les images du jeu
    """
    global IMG_MAP_ROCK, IMG_MAP_AIR, IMG_MAP_MINE, IMG_MAP_INTERROGATIVE_POINT_BASIC, IMG_MAP_BIG_INTERROGATIVE_POINT_BASIC, IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT, IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT

    IMG_MAP_ROCK = loadImage("../res/img/map/rock.png", MAP_BLOC_DIMENSIONS)
    IMG_MAP_AIR = loadImage("../res/img/map/air.png", MAP_BLOC_DIMENSIONS)
    IMG_MAP_MINE = loadImage("../res/img/map/mine.png", MAP_BLOC_DIMENSIONS)
    IMG_MAP_INTERROGATIVE_POINT_BASIC = loadImage("../res/img/map/ip.png", MAP_BLOC_DIMENSIONS)
    IMG_MAP_BIG_INTERROGATIVE_POINT_BASIC = loadImage("../res/img/map/ip.png", (100, 100))

    for i in range(IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT):
        img = imageUtils.createTransparent(IMG_MAP_INTERROGATIVE_POINT_BASIC, (i * 255) // IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT)
        IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT[i] = img
        img2 = imageUtils.createTransparent(IMG_MAP_BIG_INTERROGATIVE_POINT_BASIC, (i * 255) // IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT)
        IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT[i] = img2

def loadImage(path, dimensions):
    """
    Charge une image
    """
    if (not fileUtils.fileExist(path)):
        print(f"Le fichier \"{path}\" n'existe pas")
        return None

    img = Image.open(path)
    img = img.resize(dimensions)
    return img

def loadImagesTk():
    """
    Charge les images Tk
    """
    global IMG_MAP_ROCK_TK, IMG_MAP_AIR_TK, IMG_MAP_MINE_TK, IMG_MAP_BIG_INTERROGATIVE_POINT_TK_BASIC, IMG_MAP_INTERROGATIVE_POINT_TK_BASIC, IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_TK, IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT_TK

    IMG_MAP_ROCK_TK = loadImageTk(IMG_MAP_ROCK)
    IMG_MAP_AIR_TK = loadImageTk(IMG_MAP_AIR)
    IMG_MAP_MINE_TK = loadImageTk(IMG_MAP_MINE)
    IMG_MAP_INTERROGATIVE_POINT_TK_BASIC = loadImageTk(IMG_MAP_INTERROGATIVE_POINT_BASIC)
    IMG_MAP_BIG_INTERROGATIVE_POINT_TK_BASIC = loadImageTk(IMG_MAP_BIG_INTERROGATIVE_POINT_BASIC)

    for i in range(IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_AMOUNT):
        IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT_TK[i] = loadImageTk(IMG_MAP_INTERROGATIVE_POINT_TRANSPARENT[i])
        IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT_TK[i] = loadImageTk(IMG_MAP_INTERROGATIVE_BIG_POINT_TRANSPARENT[i])

def loadImageTk(img):
    return ImageTk.PhotoImage(img)